{"version":3,"sources":["components/Info.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Info","React","Component","Form","onSubmit","this","props","weatherMethod","type","name","placeholder","Weather","city","temp","sunrise","sunset","API_KEY","App","state","undefined","gettingWeather","e","a","async","preventDefault","target","elements","value","fetch","api_url","json","data","console","log","setState","main","sys","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kOAYeA,E,iLARP,OACI,6BACI,+L,GAJGC,IAAMC,WCWVC,E,iLATP,OACI,0BAAMC,SAAUC,KAAKC,MAAMC,eACvB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,SAC3C,oD,GALGT,IAAMC,WCaVS,E,iLAXP,OACI,6BACI,oHAAoBN,KAAKC,MAAMM,MAC/B,kGAAiBP,KAAKC,MAAMO,MAC5B,oEAAYR,KAAKC,MAAMQ,SACvB,8DAAWT,KAAKC,MAAMS,a,GAPhBd,IAAMC,WCGtBc,EAAU,mCA0CDC,E,2MAtCXC,MAAQ,CACJL,UAAMM,EACNP,UAAMO,EACNL,aAASK,EACTJ,YAAQI,G,EAGZC,eAAiB,SAAOC,GAAP,mBAAAC,EAAAC,OAAA,uDACbF,EAAEG,iBACIZ,EAAOS,EAAEI,OAAOC,SAASd,KAAKe,MAFvB,WAAAL,EAAA,MAITM,MAAM,qDAAD,OAAsDhB,EAAtD,kBAAoEI,EAApE,mBAJI,cAGPa,EAHO,kBAAAP,EAAA,MAKMO,EAAQC,QALd,OAKPC,EALO,OAMbC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACVrB,KAAMkB,EAAKI,KAAKtB,KAChBD,KAAMmB,EAAKtB,KACXK,QAASiB,EAAKK,IAAItB,QAClBC,OAAQgB,EAAKK,IAAIrB,SAXR,uC,wEAgBb,OACI,6BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMR,cAAeF,KAAKe,iBAC1B,kBAAC,EAAD,CACIP,KAAMR,KAAKa,MAAML,KACjBD,KAAMP,KAAKa,MAAMN,KACjBE,QAAST,KAAKa,MAAMJ,QACpBC,OAAQV,KAAKa,MAAMH,c,GAjCrBd,IAAMC,WCKJmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.ff69e5b9.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Info extends React.Component {\n    render () {\n        return (\n            <div>\n                <h1>Узнайте погоду в вашем городе</h1>\n            </div>\n        );\n    }\n}\n\nexport default Info;","import React from \"react\";\n\nclass Form extends React.Component {\n    render () {\n        return (\n            <form onSubmit={this.props.weatherMethod}>\n                <input type=\"text\" name=\"city\" placeholder=\"City\"/>\n                <button>Get weather</button>\n            </form>\n        );\n    }\n}\n\nexport default Form;","import React from \"react\";\n\nclass Weather extends React.Component {\n    render () {\n        return (\n            <div>\n                <p>Местоположение: {this.props.city}</p>\n                <p>Температура: {this.props.temp}</p>\n                <p>Восход: {this.props.sunrise}</p>\n                <p>Закат: {this.props.sunset}</p>\n            </div>\n        );\n    }\n}\n\nexport default Weather;","import React from \"react\";\nimport Info from \"./components/Info\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\n\nconst API_KEY = \"d55d039d8eb958c9eac5c983b435607e\";\n\nclass App extends React.Component {\n\n    state = {\n        temp: undefined,\n        city: undefined,\n        sunrise: undefined,\n        sunset: undefined,\n    };\n\n    gettingWeather = async (e) => {\n        e.preventDefault();\n        const city = e.target.elements.city.value;\n        const api_url = await\n            fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);﻿\n        const data = await api_url.json();\n        console.log(data);\n        this.setState({\n            temp: data.main.temp,\n            city: data.name,\n            sunrise: data.sys.sunrise,\n            sunset: data.sys.sunset,\n        });\n    };\n\n    render () {\n        return (\n            <div>\n                <Info />\n                <Form weatherMethod={this.gettingWeather} />\n                <Weather\n                    temp={this.state.temp}\n                    city={this.state.city}\n                    sunrise={this.state.sunrise}\n                    sunset={this.state.sunset}\n                />\n            </div>\n        );\n    };\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}